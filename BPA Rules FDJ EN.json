[
    {
        "ID": "UNPIVOT_PIVOTED_(MONTH)_DATA",
        "Name": "Unpivot pivoted (month) data",
        "Category": "Performance",
        "Description": "Avoid using pivoted data in your tables. This rule checks specifically for pivoted data by month.",
        "Severity": 4,
        "Scope": "Table, CalculatedTable",
        "Expression": "Columns.Any(Name.ToUpper().Contains(\"JAN\") && (DataType == DataType.Int64 || DataType == DataType.Decimal || DataType == DataType.Double))\nand\nColumns.Any(Name.ToUpper().Contains(\"FEB\") && (DataType == DataType.Int64 || DataType == DataType.Decimal || DataType == DataType.Double))\nand\nColumns.Any(Name.ToUpper().Contains(\"MAR\") && (DataType == DataType.Int64 || DataType == DataType.Decimal || DataType == DataType.Double))\nand\nColumns.Any(Name.ToUpper().Contains(\"APR\") && (DataType == DataType.Int64 || DataType == DataType.Decimal || DataType == DataType.Double))\nand\nColumns.Any(Name.ToUpper().Contains(\"MAY\") && (DataType == DataType.Int64 || DataType == DataType.Decimal || DataType == DataType.Double))\nand\nColumns.Any(Name.ToUpper().Contains(\"JUN\") && (DataType == DataType.Int64 || DataType == DataType.Decimal || DataType == DataType.Double))",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "SNOWFLAKE_SCHEMA_ARCHITECTURE",
        "Name": "Consider a star-schema instead of a snowflake architecture",
        "Category": "Performance",
        "Description": "Generally speaking, a star-schema is the optimal architecture for tabular models. That being the case, there are valid cases to use a snowflake approach. Please check your model and consider moving to a star-schema architecture.",
        "Severity": 2,
        "Scope": "Table, CalculatedTable",
        "Expression": "UsedInRelationships.Any(current.Name == FromTable.Name)\r\nand\r\nUsedInRelationships.Any(current.Name == ToTable.Name)",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "AVOID_SINGLE_ATTRIBUTE_DIMENSIONS",
        "Name": "Avoid single-attribute dimensions that are not shared by multiple facts",
        "Category": "Performance",
        "Description": "In general, over-normalization should be avoided. If a dimension only holds a single attribute and the dimension is not shared by multiple facts, consider moving the attribute to the fact table.",
        "Severity": 2,
        "Scope": "Table",
        "Expression": "Columns.Count(IsVisible and not UsedInRelationships.Any()) <= 1 and\nModel.Relationships.Count(ToTable = outerIt) = 1",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "AVOID_BI-DIRECTIONAL_RELATIONSHIPS_AGAINST_HIGH-CARDINALITY_COLUMNS",
        "Name": "Avoid bi-directional relationships against high-cardinality columns",
        "Category": "Performance",
        "Description": "For best performance, it is recommended to avoid using bi-directional relationships against high-cardinality columns.",
        "Severity": 3,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "UsedInRelationships.Any(CrossFilteringBehavior == CrossFilteringBehavior.BothDirections)\n\nand\n\nConvert.ToInt64(GetAnnotation(\"Vertipaq_Cardinality\")) > 100000",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "AVOID_EXCESSIVE_BI-DIRECTIONAL_OR_MANY-TO-MANY_RELATIONSHIPS",
        "Name": "Avoid excessive bi-directional or many-to-many relationships",
        "Category": "Performance",
        "Description": "Limit use of b-di and many-to-many relationships. This rule flags the model if more than 30% of relationships are bi-di or many-to-many.",
        "Severity": 2,
        "Scope": "Model",
        "Expression": "(\r\n\nRelationships.Where(CrossFilteringBehavior == CrossFilteringBehavior.BothDirections).Count()\r\n\n+\r\n\nRelationships.Where(FromCardinality.ToString() == \"Many\" && ToCardinality.ToString() == \"Many\").Count()\r\n\n)\r\n\n\n/\r\n\n\nMath.Max(Convert.ToDecimal(Relationships.Count)\n\n,1)> 0.3",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "AVOID_FLOATING_POINT_DATA_TYPES",
        "Name": "Avoid floating point data types",
        "Category": "Performance",
        "Description": "The \"Double\" floating point data type should be avoided, as it can result in unpredictable roundoff errors and decreased performance in certain scenarios. Use \"Int64\" or \"Decimal\" where appropriate (but note that \"Decimal\" is limited to 4 digits after the decimal sign).",
        "Severity": 4,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "DataType = \"Double\"",
        "FixExpression": "DataType = DataType.Decimal",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "SPLIT_DATE_AND_TIME",
        "Name": "Split date and time",
        "Category": "Performance",
        "Description": "This rule finds datetime columns that have values not at midnight. To maximize performance, the time element should be split from date element (or the time component should be rounded to midnight as this will reduce column cardinality).",
        "Severity": 4,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "Convert.ToInt32(GetAnnotation(\"DateTimeWithHourMinSec\")) > 0",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "MODEL_SHOULD_HAVE_A_DATE_TABLE",
        "Name": "Model should have a date table",
        "Category": "Performance",
        "Description": "Generally speaking, models should generally have a date table. Models that do not have a date table generally are not taking advantage of features such as time intelligence or may not have a properly structured architecture.",
        "Severity": 4,
        "Scope": "Model",
        "Expression": "Tables.Any(DataCategory == \"Time\" && Columns.Any(IsKey == true && DataType == \"DateTime\")) == false",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "MINIMIZE_POWER_QUERY_TRANSFORMATIONS",
        "Name": "Minimize Power Query transformations",
        "Category": "Performance",
        "Description": "Minimize Power Query transformations in order to improve model processing performance. It is a best practice to offload these transformations to the data warehouse if possible. Also, please check whether query folding is occurring within your model.",
        "Severity": 3,
        "Scope": "Partition",
        "Expression": "\nSourceType.ToString() = \"M\"\r\nand\r\n(\r\nQuery.Contains(\"Table.Combine(\")\r\nor\r\n\nQuery.Contains(\"Table.Join(\")\r\nor\r\n\nQuery.Contains(\"Table.NestedJoin(\")\r\nor\r\nQuery.Contains(\"Table.AddColumn(\")\r\nor\r\nQuery.Contains(\"Table.Group(\")\r\nor\r\nQuery.Contains(\"Table.Sort(\")\r\nor\r\nQuery.Contains(\"Table.Pivot(\")\r\nor\r\nQuery.Contains(\"Table.Unpivot(\")\r\nor\r\nQuery.Contains(\"Table.UnpivotOtherColumns(\")\r\nor\r\nQuery.Contains(\"Table.Distinct(\")\r\nor\r\nQuery.Contains(\"[Query=\"\"SELECT\")\r\nor\r\nQuery.Contains(\"Value.NativeQuery\")\r\nor\r\nQuery.Contains(\"OleDb.Query\")\r\nor\r\nQuery.Contains(\"Odbc.Query\")\r\n)",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "REDUCE_NUMBER_OF_CALCULATED_COLUMNS",
        "Name": "Reduce number of calculated columns",
        "Category": "Performance",
        "Description": "Calculated columns do not compress as well as data columns so they take up more memory. They also slow down processing times for both the table as well as process recalc. Offload calculated column logic to your data warehouse and turn these calculated columns into data columns.",
        "Severity": 3,
        "Scope": "Model",
        "Expression": "AllColumns.Where(Type.ToString() == \"Calculated\").Count() > 5",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "REDUCE_USAGE_OF_CALCULATED_COLUMNS_THAT_USE_THE_RELATED_FUNCTION",
        "Name": "Reduce usage of calculated columns that use the RELATED function",
        "Category": "Performance",
        "Description": "Calculated columns do not compress as well as data columns and may cause longer processing times. As such, calculated columns should be avoided if possible. One scenario where they may be easier to avoid is if they use the RELATED function.",
        "Severity": 2,
        "Scope": "CalculatedColumn",
        "Expression": "RegEx.IsMatch(Expression,\"(?i)RELATED\\s*\\(\")",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "REDUCE_USAGE_OF_LONG-LENGTH_COLUMNS_WITH_HIGH_CARDINALITY",
        "Name": "Reduce usage of long-length columns with high cardinality",
        "Category": "Performance",
        "Description": "It is best to avoid lengthy text columns. This is especially true if the column has many unique values. These types of columns can cause longer processing times, bloated model sizes, as well as slower user queries. Long length is defined as more than 100 characters.",
        "Severity": 2,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "Convert.ToInt64(GetAnnotation(\"LongLengthRowCount\")) > 500000",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "REDUCE_USAGE_OF_CALCULATED_TABLES",
        "Name": "Reduce usage of calculated tables",
        "Category": "Performance",
        "Description": "Migrate calculated table logic to your data warehouse. Reliance on calculated tables will lead to technical debt and potential misalignments if you have multiple models on your platform.",
        "Severity": 4,
        "Scope": "CalculatedTable",
        "Expression": "1=1",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "REMOVE_UNUSED_COLUMNS",
        "Name": "Remove unused columns",
        "Category": "Performance",
        "Description": "Hidden columns, which do not have any dependencies, are not used in any relationships, not used in any hierarchies and not used as the SortByColumn for other columns, will likely not be used by clients and thus take up unnecessary space. Consider removing the columns from the model to save space and improve processing time, if you are certain that no external DAX or MDX queries make use of the columns.",
        "Severity": 2,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "not IsVisible\n\nand ReferencedBy.Count = 0 \n\nand (not UsedInRelationships.Any())\n\nand (not UsedInSortBy.Any())\n\nand (not UsedInHierarchies.Any())\n\nand (not UsedInVariations.Any())",
        "FixExpression": "Delete()",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "REMOVE_REDUNDANT_COLUMNS_IN_RELATED_TABLES",
        "Name": "Remove redundant columns in related tables",
        "Category": "Performance",
        "Description": "Redundant columns take space in the model and should be removed.",
        "Severity": 4,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "UsedInRelationships.Any() == false \r\nand\r\nModel.AllColumns.Any(Name == current.Name and Table.Name != current.Table.Name and Table.UsedInRelationships.Any(FromTable.Name == current.Table.Name))",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "REMOVE_AUTO-DATE_TABLE",
        "Name": "Remove auto-date table",
        "Category": "Performance",
        "Description": "Avoid using auto-date tables. Make sure to turn off auto-date table in the settings in Power BI Desktop. This will save memory resources.",
        "Severity": 5,
        "Scope": "Table, CalculatedTable",
        "Expression": "ObjectTypeName == \"Calculated Table\"\n\r\nand\r\n\n(\nName.StartsWith(\"DateTableTemplate_\") \n\nor \n\nName.StartsWith(\"LocalDateTable_\")\n)",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "CHECK_IF_DYNAMIC_ROW_LEVEL_SECURITY_(RLS)_IS_NECESSARY",
        "Name": "Check if dynamic row level security (RLS) is necessary",
        "Category": "Performance",
        "Description": "Usage of dynamic row level security (RLS) can add memory and performance overhead. Please research the pros/cons of using it.",
        "Severity": 5,
        "Scope": "Table, CalculatedTable",
        "Expression": "RegEx.IsMatch(Expression,\"(?i)USERNAME\\(\")\r\nor\r\nRegEx.IsMatch(Expression,\"(?i)USERPRINCIPALNAME\\(\")",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "CHECK_IF_BI-DIRECTIONAL_AND_MANY-TO-MANY_RELATIONSHIPS_ARE_VALID",
        "Name": "Check if bi-directional and many-to-many relationships are valid",
        "Category": "Performance",
        "Description": "Bi-directional and many-to-many relationships may cause performance degradation or even have unintended consequences. Make sure to check these specific relationships to ensure they are working as designed and are actually necessary.",
        "Severity": 3,
        "Scope": "Relationship",
        "Expression": "FromCardinality.ToString() = \"Many\" and ToCardinality.ToString() = \"Many\"\r\nor\r\nCrossFilteringBehavior == CrossFilteringBehavior.BothDirections",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "AVOID_THE_USERELATIONSHIP_FUNCTION_AND_RLS_AGAINST_THE_SAME_TABLE",
        "Name": "Avoid the USERELATIONSHIP function and RLS against the same table",
        "Category": "Error Prevention",
        "Description": "The USERELATIONSHIP function may not be used against a table which also leverages row-level security (RLS). This will generate an error when using the particular measure in a visual. This rule will highlight the table which is used in a measure's USERELATIONSHIP function as well as RLS.",
        "Severity": 5,
        "Scope": "Table, CalculatedTable",
        "Expression": "Model.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)USERELATIONSHIP\\s*\\(\\s*.+?(?=])\\]\\s*,\\s*'*\" + current.Name + \"'*\\[\"))\r\nand\r\nRowLevelSecurity.Any(it <> null)",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "DATA_COLUMNS_MUST_HAVE_A_SOURCE_COLUMN",
        "Name": "Data columns must have a source column",
        "Category": "Error Prevention",
        "Description": "Data columns must have a source column. A data column without a source column will cause an error when processing the model.",
        "Severity": 3,
        "Scope": "DataColumn",
        "Expression": "string.IsNullOrWhitespace(SourceColumn)",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "DISABLE_ATTRIBUTE_HIERACHIES",
        "Name": "Disable attribute hierachies to decrease processing",
        "Category": "Metadata",
        "Description": "Disable Attribute hierarchies for hidden collumns. This will ensure faster processing.",
        "Severity": 5,
        "Scope": "DataColumn",
        "Expression": "not IsVisible\nand IsAvailableInMDX\nand not UsedInHierarchies.Any()\nand not UsedInVariations.Any()\nand not UsedInSortBy.Any()",
        "FixExpression": "IsAvailableInMDX = false",
        "CompatibilityLevel": 1400
    },
    {
        "ID": "META_SUMMARIZE_NONE",
        "Name": "Don't summarize numeric columns",
        "Category": "Metadata",
        "Description": "Set the SummarizeBy property of all visible numeric columns to \"None\", to avoid unintentional summarization in client tools. Create measures for columns that are supposed to be summarized.",
        "Severity": 4,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "IsVisible\nand SummarizeBy <> \"None\"\nand (DataType = \"Double\" or DataType = \"Decimal\" or DataType = \"Int64\")",
        "FixExpression": "SummarizeBy = AggregateFunction.None",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "LAYOUT_HIDE_FK_COLUMNS",
        "Name": "Hide foreign key columns",
        "Category": "Model Layout",
        "Description": "Columns used on the Many side of a relationship should be hidden, as the related (dimension) table is likely the best place to apply a filter context.",
        "Severity": 3,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "IsVisible\nand Model.Relationships.Any(FromColumn = outerIt)",
        "FixExpression": "IsHidden = true",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "LAYOUT_MEASURES_DF",
        "Name": "Organize measures in display folders",
        "Category": "Model Layout",
        "Description": "Tables with more than 10 visible measures should have them organized in display folders for improved usability.",
        "Severity": 4,
        "Scope": "Table",
        "Expression": "Measures.Count(IsVisible and string.IsNullOrEmpty(DisplayFolder)) > 10",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "FIX_REFERENTIAL_INTEGRITY_VIOLATIONS",
        "Name": "Fix referential integrity violations",
        "Category": "Maintenance",
        "Description": "This rule highlights relationships which have referential integrity violations. This indicates that there are values in the table on the 'from' side of the relationship which do not exist in the table on the 'to' side of the relationship. Referential integrity violations will also produce the 'blank' member value in slicers. It is recommended to fix these issues by ensuring that the 'to' table's primary key column has all the values in the 'from' table's foreign key column.",
        "Severity": 3,
        "Scope": "Relationship",
        "Expression": "Convert.ToInt64(GetAnnotation(\"Vertipaq_RIViolationInvalidRows\")) > 0",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "CALCULATION_GROUPS_WITH_NO_CALCULATION_ITEMS",
        "Name": "Calculation groups with no calculation items",
        "Category": "Maintenance",
        "Description": "Calculation groups have no function unless they have calculation items.",
        "Severity": 4,
        "Scope": "CalculationGroup",
        "Expression": "CalculationItems.Count == 0",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "REMOVE_ROLES_WITH_NO_MEMBERS",
        "Name": "Remove roles with no members",
        "Category": "Maintenance",
        "Description": "May remove roles with no members.",
        "Severity": 3,
        "Scope": "ModelRole",
        "Expression": "Members.Count() == 0",
        "FixExpression": "Delete()",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "USE_THE_DIVIDE_FUNCTION_FOR_DIVISION",
        "Name": "Use the DIVIDE function for division",
        "Category": "DAX Expressions",
        "Description": "Use the DIVIDE  function instead of using \"/\". The DIVIDE function resolves divide-by-zero cases. As such, it is recommended to use to avoid errors.",
        "Severity": 4,
        "Scope": "Measure, CalculatedColumn, CalculationItem",
        "Expression": "RegEx.IsMatch(Expression,\"\\]\\s*\\/(?!\\/)(?!\\*)\")\r\nor\r\nRegEx.IsMatch(Expression,\"\\)\\s*\\/(?!\\/)(?!\\*)\")",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "AVOID_USING_THE_IFERROR_FUNCTION",
        "Name": "Avoid using the IFERROR function",
        "Category": "DAX Expressions",
        "Description": "Avoid using the IFERROR function as it may cause performance degradation. If you are concerned about a divide-by-zero error, use the DIVIDE function as it naturally resolves such errors as blank (or you can customize what should be shown in case of such an error).",
        "Severity": 2,
        "Scope": "Measure, CalculatedColumn",
        "Expression": "RegEx.IsMatch(Expression,\"(?i)IFERROR\\s*\\(\")",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "FILTER_COLUMN_VALUES",
        "Name": "Filter column values with proper syntax",
        "Category": "DAX Expressions",
        "Description": "Instead of using this pattern FILTER('Table','Table'[Column]=\"Value\") for the filter parameters of a CALCULATE or CALCULATETABLE function, use one of the options below. \r\n\r\nOption 1: KEEPFILTERS('Table'[Column]=\"Value\")\r\nOption 2: 'Table'[Column]=\"Value\".",
        "Severity": 3,
        "Scope": "Measure, CalculatedColumn, CalculationItem",
        "Expression": "RegEx.IsMatch(Expression,\"(?i)CALCULATE\\s*\\(\\s*[^,]+,\\s*(?i)FILTER\\s*\\(\\s*\\'*[A-Za-z0-9 _]+'*\\s*,\\s*\\'*[A-Za-z0-9 _]+\\'*\\[[A-Za-z0-9 _]+\\]\")\r\nor\r\nRegEx.IsMatch(Expression,\"(?i)CALCULATETABLE\\s*\\([^,]*,\\s*(?i)FILTER\\s*\\(\\s*\\'*[A-Za-z0-9 _]+\\'*,\\s*\\'*[A-Za-z0-9 _]+\\'*\\[[A-Za-z0-9 _]+\\]\")",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "MEASURES_SHOULD_NOT_BE_DIRECT_REFERENCES_OF_OTHER_MEASURES",
        "Name": "Measures should not be direct references of other measures",
        "Category": "DAX Expressions",
        "Description": "This rule identifies measures which are simply a reference to another measure. As an example, consider a model with two measures: [MeasureA] and [MeasureB]. This rule would be triggered for MeasureB if MeasureB's DAX was MeasureB:=[MeasureA]. Such duplicative measures should be removed.",
        "Severity": 4,
        "Scope": "Measure",
        "Expression": "Model.AllMeasures.Any(DaxObjectName == current.Expression)",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "DAX_COLUMNS_FULLY_QUALIFIED",
        "Name": "Column references should be fully qualified",
        "Category": "DAX Expressions",
        "Description": "Using fully qualified column references makes it easier to distinguish between column and measure references, and also helps avoid certain errors. When referencing a column in DAX, first specify the table name, then specify the column name in square brackets.",
        "Severity": 4,
        "Scope": "Measure, KPI, TablePermission, CalculationItem",
        "Expression": "DependsOn.Any(Key.ObjectType = \"Column\" and Value.Any(not FullyQualified))",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "DAX_MEASURES_UNQUALIFIED",
        "Name": "Measure references should be unqualified",
        "Category": "DAX Expressions",
        "Description": "Using unqualified measure references makes it easier to distinguish between column and measure references, and also helps avoid certain errors.",
        "Severity": 4,
        "Scope": "Measure, CalculatedColumn, CalculatedTable, KPI",
        "Expression": "DependsOn.Any(Key.ObjectType = \"Measure\" and Value.Any(FullyQualified))",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "INACTIVE_RELATIONSHIPS_THAT_ARE_NEVER_ACTIVATED",
        "Name": "Inactive relationships that are never activated",
        "Category": "DAX Expressions",
        "Description": "Inactive relationships are activated using the USERELATIONSHIP function. If an inactive relationship is not referenced in any measure via this function, the relationship will not be used. It should be determined whether the relationship is not necessary or to activate the relationship via this method.",
        "Severity": 4,
        "Scope": "Relationship",
        "Expression": "IsActive == false\r\nand not\r\n(\r\nModel.AllMeasures.Any(RegEx.IsMatch(Expression,\r\n\"(?i)USERELATIONSHIP\\s*\\(\\s*\\'*\" +\r\ncurrent.FromTable.Name + \"\\'*\\[\" + \r\ncurrent.FromColumn.Name + \"\\]\\s*,\\s*\\'*\" +\r\ncurrent.ToTable.Name + \"\\'*\\[\" +\r\ncurrent.ToColumn.Name + \"\\]\"))\r\nor\r\nModel.AllCalculationItems.Any(RegEx.IsMatch(Expression,\r\n\"(?i)USERELATIONSHIP\\s*\\(\\s*\\'*\" +\r\ncurrent.FromTable.Name + \"\\'*\\[\" + \r\ncurrent.FromColumn.Name + \"\\]\\s*,\\s*\\'*\" +\r\ncurrent.ToTable.Name + \"\\'*\\[\" +\r\ncurrent.ToColumn.Name + \"\\]\"))\r\n)",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "USE_THE_TREATAS_FUNCTION_INSTEAD_OF_INTERSECT",
        "Name": "Use the TREATAS function instead of INTERSECT for virtual relationships",
        "Category": "DAX Expressions",
        "Description": "The TREATAS function is more efficient and provides better performance than the INTERSECT function when used in virtual relationships.",
        "Severity": 4,
        "Scope": "Measure, CalculationItem",
        "Expression": "RegEx.IsMatch(Expression,\"(?i)INTERSECT\\s*\\(\")",
        "CompatibilityLevel": 1400
    },
    {
        "ID": "ADD_DATA_CATEGORY_FOR_COLUMNS",
        "Name": "Add data category for columns",
        "Category": "Formatting",
        "Description": "Add Data Category property for appropriate columns.",
        "Severity": 3,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "string.IsNullOrWhitespace(DataCategory)\r\nand\r\n(\r\n(\r\nName.ToLower().Contains(\"country\")\r\nor \r\n\nName.ToLower().Contains(\"continent\"\n)\r\nor\r\nName.ToLower().Contains(\"city\")\r\n)\r\nand DataType == \"String\"\r\n)\r\nor \r\n(\r\n(\nName.ToLower() == \"latitude\" \n or \nName.ToLower() == \"longitude\")\r\nand (DataType == DataType.Decimal or DataType == DataType.Double)\r\n)",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "DATECOLUMN_FORMATSTRING",
        "Name": "Provide format string for date columns",
        "Category": "Formatting",
        "Description": "Columns of type \"DateTime\" that have \"Month\" in their names should be formatted as \"dd/mm/yyyy\".",
        "Severity": 3,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "Name.IndexOf(\"Date\", \"OrdinalIgnoreCase\") >= 0 \r\nand \r\nDataType = \"DateTime\" \r\nand \r\nFormatString <> \"dd/mm/yyyy\"",
        "FixExpression": "FormatString = \"dd/mm/yyyy\"",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "APPLY_FORMAT_STRING_COLUMNS",
        "Name": "Provide format string for visible numeric columns",
        "Category": "Formatting",
        "Description": "Visible numeric columns should have their Format String property assigned.",
        "Severity": 3,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "IsVisible\nand string.IsNullOrWhitespace(FormatString)\nand (DataType = \"Int64\" or DataType = \"DateTime\" or DataType = \"Double\" or DataType = \"Decimal\")\n",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "APPLY_FORMAT_STRING_MEASURES",
        "Name": "Provide format string for visible numeric measures",
        "Category": "Formatting",
        "Description": "Visible measures should have their Format String property assigned.",
        "Severity": 3,
        "Scope": "Measure",
        "Expression": "IsVisible\nand string.IsNullOrWhitespace(FormatString)\nand (DataType = \"Int64\" or DataType = \"DateTime\" or DataType = \"Double\" or DataType = \"Decimal\")",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "MONTH_(AS_A_STRING)_MUST_BE_SORTED",
        "Name": "Month (as a string) must be sorted",
        "Category": "Formatting",
        "Description": "This rule highlights month columns which are strings and are not sorted. If left unsorted, they will sort alphabetically (i.e. April, August...). Make sure to sort such columns so that they sort properly (January, February, March...).",
        "Severity": 5,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "Name.ToUpper().Contains(\"MONTH\")\r\nand\r\n! Name.ToUpper().Contains(\"MONTHS\") \r\nand \r\n\n\nDataType == DataType.String \r\nand \r\nSortByColumn == null",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "RELATIONSHIP_COLUMNS_SHOULD_BE_OF_INTEGER_DATA_TYPE",
        "Name": "Relationship columns should be of integer data type",
        "Category": "Formatting",
        "Description": "It is a best practice for relationship columns to be of integer data type. This applies not only to data warehousing but data modeling as well.",
        "Severity": 3,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "UsedInRelationships.Any()\n\nand \n\nDataType != DataType.Int64",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "INTEGER_FORMATTING",
        "Name": "Whole numbers should be formatted with thousands separators and no decimals",
        "Category": "Formatting",
        "Severity": 3,
        "Scope": "Measure",
        "Expression": "not FormatString.Contains(\"$\") and not FormatString.Contains(\"€\") and not FormatString.Contains(\"%\") and not (FormatString = \"#,0\" or FormatString = \"#,0.0\")",
        "FixExpression": "FormatString = \"#,0\"",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "OBJECTS_SHOULD_NOT_START_OR_END_WITH_A_SPACE",
        "Name": "Objects should not start or end with a space",
        "Category": "Formatting",
        "Description": "Objects should not start or end with a space.",
        "Severity": 5,
        "Scope": "Model, Table, Measure, Hierarchy, Perspective, Partition, DataColumn, CalculatedColumn",
        "Expression": "Name.StartsWith(\" \") or Name.EndsWith(\" \")",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "PERCENTAGE_FORMATTING",
        "Name": "Percentages should be formatted with thousands separators and one decimal.",
        "Category": "Formatting",
        "Severity": 3,
        "Scope": "Measure",
        "Expression": "FormatString.Contains(\"%\") and FormatString <> \"#,0.0%;-#,0.0%;#,0.0%\"",
        "FixExpression": "FormatString = \"#,0.0%\\u003B-#,0.0%\\u003B#,0.0%\"",
        "CompatibilityLevel": 1200
    }
    {
        "ID": "MARK_PRIMARY_KEYS",
        "Name": "Mark primary keys",
        "Category": "Formatting",
        "Description": "Set the 'Key' property to 'True' for primary key columns within the column properties.",
        "Severity": 5,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "UsedInRelationships.Any(ToTable.Name == current.Table.Name and ToColumn.Name == current.Name and ToCardinality == \"One\")\r\n\nand\r\n\nIsKey == false\r\nand\r\ncurrent.Table.DataCategory != \"Time\"",
        "FixExpression": "IsKey = true",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "HIDE_FACT_TABLE_COLUMNS",
        "Name": "Hide fact table columns",
        "Category": "Formatting",
        "Description": "It is a best practice to hide fact table columns that are used for aggregation in measures.",
        "Severity": 3,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "(\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)COUNT\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\r\n\nor\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)COUNTBLANK\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\r\n\nor\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)SUM\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\r\nor\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)AVERAGE\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\r\n\nor\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)VALUES\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\r\n\nor\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)DISTINCT\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\r\nor\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)DISTINCTCOUNT\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\r\n\nor\n\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)MIN\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\r\n\nor\n\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)MAX\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\r\n\nor\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)COUNTA\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\n\r\n\nor\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)AVERAGEA\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\r\n\nor\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)MAXA\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\r\n\nor\r\nReferencedBy.AllMeasures.Any(RegEx.IsMatch(Expression,\"(?i)MINA\\s*\\(\\s*\\'*\" + outerit.Table.Name + \"\\'*\\[\" + outerit.Name + \"\\]\\s*\\)\"))\r\n)\r\n\nand IsHidden == false\r\n\nand (DataType == \"Int64\" || DataType == \"Decimal\" || DataType == \"Double\")",
        "FixExpression": "IsHidden = true",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "NO_CAMELCASE_COLUMNS_HIERARCHIES",
        "Name": "Avoid CamelCase on visible columns and hierarchies",
        "Category": "Naming Conventions",
        "Description": "Visible columns and hierarchies should not use CamelCase in their names, unless translations are applied.",
        "Severity": 3,
        "Scope": "Hierarchy, DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "IsVisible \nand RegEx.IsMatch(Name, \"[A-Z]([A-Z0-9]*[a-z][a-z0-9]*[A-Z]|[a-z0-9]*[A-Z][A-Z0-9]*[a-z])[A-Za-z0-9]*\") \nand not Name.Contains(\" \") \nand (Model.Cultures.Count = 0 or TranslatedNames.Any(it = \"\" or it = outerIt.Name))",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "NO_CAMELCASE_MEASURES_TABLES",
        "Name": "Avoid CamelCase on visible measures and tables",
        "Category": "Naming Conventions",
        "Description": "Visible measures and tables should not use CamelCase in their names, unless translations are applied.",
        "Severity": 3,
        "Scope": "Table, Measure, CalculatedTable",
        "Expression": "IsVisible \nand RegEx.IsMatch(Name, \"[A-Z]([A-Z0-9]*[a-z][a-z0-9]*[A-Z]|[a-z0-9]*[A-Z][A-Z0-9]*[a-z])[A-Za-z0-9]*\") \nand not Name.Contains(\" \") \nand (Model.Cultures.Count = 0 or TranslatedNames.Any(it = \"\" or it = outerIt.Name))",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "RELATIONSHIP_COLUMN_NAMES",
        "Name": "Names of columns in relationships should be the same",
        "Category": "Naming Conventions",
        "Description": "When a single relationship exists between two tables, the columns on both sides of the relationship must have the same name. When multiple relationships exist between two tables, the name of the FromColumn must end with the name of the ToColumn (for example OrderDateKey, ShipDateKey, DueDateKey, etc.).",
        "Severity": 3,
        "Scope": "Relationship",
        "Expression": "(Model.Relationships.Count(FromTable = OuterIt.FromTable and ToTable = OuterIt.ToTable) = 1 and FromColumn.Name <> ToColumn.Name) or\n(Model.Relationships.Count(FromTable = OuterIt.FromTable and ToTable = OuterIt.ToTable) > 1 and not FromColumn.Name.EndsWith(ToColumn.Name))",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "UPPERCASE_FIRST_LETTER_COLUMNS_HIERARCHIES",
        "Name": "Column and hierarchy names must start with uppercase letter",
        "Category": "Naming Conventions",
        "Description": "Avoid using prefixes and camelCasing. Use \"Sales\" instead of \"dimSales\" or \"mSales\".",
        "Severity": 3,
        "Scope": "DataColumn, CalculatedColumn, CalculatedTableColumn",
        "Expression": "IsVisible\nand char.IsLower(Name[0])\nand (Model.Cultures.Count = 0 or TranslatedNames.Any(it = \"\" or it = outerIt.Name))",
        "CompatibilityLevel": 1200
    },
    {
        "ID": "UPPERCASE_FIRST_LETTER_MEASURES_TABLES",
        "Name": "Measure and table names must start with uppercase letter",
        "Category": "Naming Conventions",
        "Description": "Avoid using prefixes and camelCasing. Use \"Sales\" instead of \"dimSales\" or \"mSales\".",
        "Severity": 3,
        "Scope": "Table, Measure, CalculatedTable",
        "Expression": "IsVisible\nand char.IsLower(Name[0])\nand (Model.Cultures.Count = 0 or TranslatedNames.Any(it = \"\" or it = outerIt.Name))\n",
        "CompatibilityLevel": 1200
    }
]